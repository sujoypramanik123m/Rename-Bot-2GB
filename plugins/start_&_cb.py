import random
from pyrogram import Client, filters
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ForceReply, CallbackQuery
from helper.database import jishubotz
from config import Config, Txt  
  

@Client.on_message(filters.private & filters.command("start"))
async def start(client, message):
    user = message.from_user
    await jishubotz.add_user(client, message)                
    button = InlineKeyboardMarkup([
        [InlineKeyboardButton('‚Ä¢ A ô·¥è·¥ú·¥õ ‚Ä¢', callback_data='about'),
        InlineKeyboardButton('‚Ä¢ H·¥á ü·¥ò ‚Ä¢', callback_data='help')],
        [InlineKeyboardButton("‚ôª ·¥Ö·¥á·¥†·¥á ü·¥è·¥ò·¥á Ä ‚ôª", url='https://telegram.me/UncleChipssBot')]
    ])
    if Config.START_PIC:
        await message.reply_photo(Config.START_PIC, caption=Txt.START_TXT.format(user.mention), reply_markup=button)       
    else:
        await message.reply_text(text=Txt.START_TXT.format(user.mention), reply_markup=button, disable_web_page_preview=True)
   

@Client.on_callback_query()
async def cb_handler(client, query: CallbackQuery):
    data = query.data 
    if data == "start":
        await query.message.edit_text(
            text=Txt.START_TXT.format(query.from_user.mention),
            disable_web_page_preview=True,
            reply_markup = InlineKeyboardMarkup([
                [InlineKeyboardButton('‚Ä¢ A ô·¥è·¥ú·¥õ ‚Ä¢', callback_data='about'),
                InlineKeyboardButton('‚Ä¢ H·¥á ü·¥ò ‚Ä¢', callback_data='help')],
		[InlineKeyboardButton('‚Ä¢ U·¥ò·¥Ö·¥Ä·¥õ·¥á G Ä·¥è·¥ú·¥ò ‚Ä¢', url='https://t.me/SuperToppers'),
		InlineKeyboardButton('‚Ä¢ S·¥ú·¥ò·¥ò·¥è Ä·¥õ G Ä·¥è·¥ú·¥ò ‚Ä¢', url='https://t.me/SuperToppers0')]
                [InlineKeyboardButton("‚ôª ·¥Ö·¥á·¥†·¥á ü·¥è·¥ò·¥á Ä ‚ôª", url='https://telegram.me/UncleChipssBot')]
            ])
        )
    elif data == "help":
        await query.message.edit_text(
            text=Txt.HELP_TXT,
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup([
		[InlineKeyboardButton("s·¥á·¥õ ·¥ç·¥á·¥õ·¥Ä·¥Ö·¥Ä·¥õ·¥Ä", callback_data = "meta")],
                [InlineKeyboardButton("·¥ò Ä·¥áÍú∞…™x", callback_data = "prefix"),
                InlineKeyboardButton("s·¥úÍú∞Íú∞…™x", callback_data = "suffix")],
		[InlineKeyboardButton("·¥Ñ·¥Ä·¥ò·¥õ…™·¥è…¥", callback_data = "caption"),
                InlineKeyboardButton("·¥õ ú·¥ú·¥ç ô…¥·¥Ä…™ ü", callback_data = "thumbnail")],
		[InlineKeyboardButton(" ú·¥è·¥ç·¥á", callback_data = "start")]
            ])            
        )

    elif data == "meta":
        await query.message.edit_caption(
            caption=Txt.SEND_METADATA,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("B·¥Ä·¥Ñ·¥ã", callback_data="help"), InlineKeyboardButton("·¥Ñ ü·¥ès·¥á", callback_data="close")]
            ])
	)

    elif data == "prefix":
        await query.message.edit_caption(
            caption=Txt.PREFIX,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("B·¥Ä·¥Ñ·¥ã", callback_data="help"), InlineKeyboardButton("·¥Ñ ü·¥ès·¥á", callback_data="close")]
            ])
	)

    elif data == "suffix":
        await query.message.edit_caption(
            caption=Txt.SUFFIX,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("B·¥Ä·¥Ñ·¥ã", callback_data="help"), InlineKeyboardButton("·¥Ñ ü·¥ès·¥á", callback_data="close")]
            ])
	)

    elif data == "caption":
        await query.message.edit_caption(
            caption=Txt.CAPTION_TXT,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("B·¥Ä·¥Ñ·¥ã", callback_data="help"), InlineKeyboardButton("·¥Ñ ü·¥ès·¥á", callback_data="close")]
            ])
	)

    elif data == "thumbnail":
        await query.message.edit_caption(
            caption=Txt.THUMBNAIL_TXT,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("B·¥Ä·¥Ñ·¥ã", callback_data="help"), InlineKeyboardButton("·¥Ñ ü·¥ès·¥á", callback_data="close")]
            ])
	)

    elif data == "about":
        await query.message.edit_text(
            text=Txt.ABOUT_TXT,
            disable_web_page_preview = True,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üë®‚Äçüíª  R·¥á·¥ò·¥è", url="https://github.com"),
                InlineKeyboardButton("üí•  D·¥è…¥·¥Ä·¥õ·¥á", callback_data="donate")],
		[InlineKeyboardButton("H·¥è·¥ç·¥á", callback_data="start")]
            ])            
        )

    elif data == "donate":
        await query.message.edit_text(
            text=Txt.DONATE_TXT,
            disable_web_page_preview = True,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("ü§ñ M·¥è Ä·¥á B·¥è·¥õs", url="https://telegram.me/ProToppers")],
                [InlineKeyboardButton("B·¥Ä·¥Ñ·¥ã", callback_data = "about"),
                InlineKeyboardButton("C ü·¥ès·¥á", callback_data = "close")]
            ])            
	)

    elif data == "close":
        try:
            await query.message.delete()
            await query.message.reply_to_message.delete()
            await query.message.continue_propagation()
        except:
            await query.message.delete()
            await query.message.continue_propagation()

    elif data.startswith("sendAlert"):
        user_id =(data.split("_")[1])
        user_id = int(user_id.replace(' ' , ''))
        if len(str(user_id)) == 10:
            reason = str(data.split("_")[2])
            try:
                await client.send_message(user_id , f"<b> è·¥è·¥ú ·¥Ä Ä·¥á  ô·¥Ä…¥…¥·¥á·¥Ö  ô è [ Ä·¥Ä ú·¥ú ü](https://telegram.me/callownerbot)\n Ä·¥á·¥Äs·¥è…¥ : {reason}</b>")
                await query.message.edit(f"<b>A ü·¥á Ä·¥õ s·¥á…¥·¥õ ·¥õ·¥è <code>{user_id}</code>\n Ä·¥á·¥Äs·¥è…¥ : {reason}</b>")
            except Exception as e:
                await query.message.edit(f"<b>s Ä è …™ …¢·¥è·¥õ ·¥õ ú…™s ·¥á Ä Ä·¥è Ä : {e}</b>")
        else:
            await query.message.edit(f"<b>T ú·¥á ·¥ò Ä·¥è·¥Ñ·¥áss ·¥°·¥Äs …¥·¥è·¥õ ·¥Ñ·¥è·¥ç·¥ò ü·¥á·¥õ·¥á·¥Ö  ô·¥á·¥Ñ·¥Ä·¥ús·¥á ·¥õ ú·¥á ·¥ús·¥á Ä …™·¥Ö ·¥°·¥Äs …¥·¥è·¥õ ·¥†·¥Ä ü…™·¥Ö, ·¥è Ä ·¥ò·¥á Ä ú·¥Ä·¥òs …™·¥õ ·¥°·¥Äs ·¥Ä ·¥Ñ ú·¥Ä…¥…¥·¥á ü …™·¥Ö</b>")

    elif data.startswith('noAlert'):
        user_id =(data.split("_")[1])
        user_id = int(user_id.replace(' ' , ''))
        await query.message.edit(f"<b>T ú·¥á  ô·¥Ä…¥ ·¥è…¥ <code>{user_id}</code> ·¥°·¥Äs ·¥áx·¥á·¥Ñ·¥ú·¥õ·¥á·¥Ö s…™ ü·¥á…¥·¥õ ü è.</b>")

    elif data.startswith('sendUnbanAlert'):
        user_id =(data.split("_")[1])
        user_id = int(user_id.replace(' ' , ''))
        if len(str(user_id)) == 10:
            try:
                unban_text = "<b> ú·¥ú Ä Ä·¥Ä è.. è·¥è·¥ú ·¥Ä Ä·¥á ·¥ú…¥ ô·¥Ä…¥…¥·¥á·¥Ö  ô è [ Ä·¥Ä ú·¥ú ü](https://telegram.me/callownerbot)</b>"
                await client.send_message(user_id , unban_text)
                await query.message.edit(f"<b>U…¥ ô·¥Ä…¥…¥·¥á·¥Ö A ü·¥á Ä·¥õ s·¥á…¥·¥õ ·¥õ·¥è <code>{user_id}</code>\n·¥Ä ü·¥á Ä·¥õ ·¥õ·¥áx·¥õ : {unban_text}</b>")
            except Exception as e:
                await query.message.edit(f"<b>s Ä è …™ …¢·¥è·¥õ ·¥õ ú…™s ·¥á Ä Ä·¥è Ä : {e}</b>")
        else:
            await query.message.edit(f"<b>T ú·¥á ·¥ò Ä·¥è·¥Ñ·¥áss ·¥°·¥Äs …¥·¥è·¥õ ·¥Ñ·¥è·¥ç·¥ò ü·¥á·¥õ·¥á·¥Ö  ô·¥á·¥Ñ·¥Ä·¥ús·¥á ·¥õ ú·¥á ·¥ús·¥á Ä …™·¥Ö ·¥°·¥Äs …¥·¥è·¥õ ·¥†·¥Ä ü…™·¥Ö, ·¥è Ä ·¥ò·¥á Ä ú·¥Ä·¥òs …™·¥õ ·¥°·¥Äs ·¥Ä ·¥Ñ ú·¥Ä…¥…¥·¥á ü …™·¥Ö</b>")   
    elif data.startswith('NoUnbanAlert'):
        user_id =(data.split("_")[1])
        user_id = int(user_id.replace(' ' , ''))
        await query.message.edit(f"T ú·¥á ·¥ú…¥ ô·¥Ä…¥ ·¥è…¥ <code>{user_id}</code> ·¥°·¥Äs ·¥áx·¥á·¥Ñ·¥ú·¥õ·¥á·¥Ö s…™ ü·¥á…¥·¥õ ü è.")
